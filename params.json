{"name":"iBGP2","tagline":"iBGP2: a scalable iBGP redistribution mechanism (requires ns3)","body":"# Welcome to iBGP2 repository\r\n\r\nThis site provides the sources used in the article \"iBGP2: a scalable iBGP2 redistribution mechanism leading to optimal routing\" (Marc-Olivier Buob, Anthony Lambert, Steve Uhlig, INFOCOM'2016).\r\n\r\niBGP2 was imagined during at the end of my thesis at Orange Labs (2005-2008), and implemented and published in 2015.\r\n\r\n## Key idea\r\n\r\niBGP2 daemon adapts the way a BGP router redistributes its BGP routes to its iBGP neighbors according to the IGP topology: a router `u` should redistribute to a router `v` the BGP routes related to a next-hop `n` iif `u` belongs to the shortest path from `v` to `u` (iBGP2 route redistribution rule). By doing so, each BGP router is able to learn its best possible egress point for any BGP prefix. Once BGP has converged, the routing is stable, optimal, and loop-free, since the network behaves as if it was using an iBGP full mesh.\r\n\r\n## Implementation\r\n### Overview\r\n\r\nThe current implementation is based on ns3 and ns3-dce, which allows to run Quagga on ns-3 nodes. These simulations allows to compare how the network behaves using an iBGP full mesh, route reflection (RR), or iBGP2. To do so, the user defines the IGP topology of the simulated AS. It also defines the iBGP topology if route reflection is used. An additional router, named nh, inject some eBGP routes inside the AS to a given subset of the border routers (ASBR) according to user's settings. We assume in this implementation that every routers of the simulated AS are both IGP and BGP routers.\r\n\r\n### iBGP2\r\n\r\nEach router of the AS runs iBGP2. This daemon discovers the IGP topology by sniffing IGP packet. It establishes a RR-to-RR-client iBGP session toward each IGP neighbors of the router. Hence, BGP route can be redistributed to each of the IGP/iBGP2 neighbor without limitation (contrary to RR hierarchy). iBGP route redistribution is limited by installing BGP filters on these iBGP session. We can thus exactly mimic the iBGP2 route redistribution. To do so, iBGP2 establish a telnet session to Quagga and configures dynamically BGP filters.\r\n\r\nThe current implementation only works over IPv4 network using OSPF. It could be easily extended to support IPv6 networks. The sniffer could be extended to support other link-state IGP protocol such as IS-IS. Note also that the current implementation does not support OSPF areas.\r\n\r\n### Input files:\r\n\r\nExamples could be found in datasets/article.\r\n\r\nThe simulator uses the following input files.\r\n- _igp.csv:_ each line correspond to an IGP link. It is made of two router names and an unsigned integer corresponding to the OSPF weight set up from the first router to the second router. A OSPF network is built for each IGP link. Note that |u,v| and |v,u| metrics may differ (asymetric link).\r\n- _asbr.csv:_ each line contains a router name which acts as an ASBR. It means that an eBGP session will be configured between the external router `nh` and this router.\r\n- _ibgp.csv:_ each line defines an iBGP session (UP: client-to-RR session, OVER: standard iBGP session, DOWN: RR-to-client-session). Note that in terms of BGP configuration file, UP <=> OVER.\r\n- _prefix.csv:_ each line contains an ASBR name (see asbr.csv) and a prefix learned by this ASBR via its eBGP neighbor `nh`.\r\n\r\nThe simulation time must be enough long to guarantee that BGP has converged.\r\n\r\n## FAQ\r\n\r\n### What do you call \"fake links\" ?\r\n\r\nIn dce/source/ns-3-dce/myscripts/ns-3-dce-quagga/example/dce-ibgpv2-simu.cc in RR mode, we build some fake links. \r\n\r\nWhen a router `u` establishes a session toward a given IP of a router `v`, `v` might use another interface to contact `u`. In this situation, the session (u, v) is not rejected by quagga because the interfaces mismatch. We could define a loopback interface on each router (reannounced in OSPF) and only use loopback interfaces to setup iBGP session. Unfortunately, I was unable to make it work.\r\n\r\nThat is why I used a (crappy) word around: I define a fake link between u and v. The corresponding route can be used to establish a direct session between u and v. OSPF is configured to not reannounce this link. Hence the OSPF topology is not impacted by this trick.\r\n\r\nHowever, if somebody is able to define proper loopbacks, it would significantly simplify dce-ibgpv2-simu.cc.\r\n\r\n### Why did you used so small topology?\r\n\r\nMainly because the simulation time is already quite long. In the paper I evaluate how the network behaves when route equally good in terms of local-pref, as-path, med for every possible subset of ASBR. Unfortunately to evaluate CPU usage, I cannot group all these simulation in a single run, I can only group in a single run the subset of same size. This is why you can see in datasets/article/prefix.all several csv file. Each prefix`N`.csv lists all the subsets of size `N`.\r\n\r\n### Why bgpd.conf remains empty at the end of the iBGP2 runs?\r\n\r\nUnfortunately, ns3-dce does not yet provide the functions to write the resulting configuration file on the file system, and that is why the bgpd configuration file will remain quite empty at the end of the simulation.\r\n\r\n### What about IGP areas?\r\n\r\nBasically, when areas are used, a packet should never transit more than once in a given area. Thus, guaranteeing that the routing is loop-free in each area is sufficient to prove that the overall routing is loop-free. Consider a given area. To make iBGP2 works in this context, iBGP2 simply has to consider that inter-area router (ABR or L1-L2 routers) as we considered ASBR so far. Each area could be seen as a single AS where next-hops are inter-area router + all the BGP next-hops connected to this area. Each of them use a local optimal BGP routing.\r\n\r\n## Some (unrelated) contributions\r\n\r\n### tcpdump\r\n\r\nThis repository provides a wrapper for tcpdump. This is the opportunity for developers to print handled packet in a humain readable fashion.\r\n\r\nSee usage in dce/source/ns-3-dce/myscripts/ns-3-dce-quagga/model/ibgp2d/ibgp2d.cc (Ibgp2d::HandlePacket)\r\n\r\n### telnet\r\n\r\nTelnet wrapper can be used to configure or query quagga daemons.\r\n\r\nSee usage in dce/source/ns-3-dce/myscripts/ns-3-dce-quagga/model/ibgp2d/ibgp2d.cc (Ibgp2d::UpdateIbgpFilters)\r\n\r\n## Installation steps\r\n\r\nSee doc/ns3_ibgp2_installation_steps.txt\r\n\r\n## Related documents\r\n\r\nArticle: (soon released)\r\nThesis (in french): [thesis, ch4](http://marcolivier.buob.pagesperso-orange.fr/pdf/thesis.pdf) [slides, s30-37](http://marcolivier.buob.pagesperso-orange.fr/pdf/thesis_slides.pdf)\r\nPatents: [english](https://www.google.com.ar/patents/WO2010010265A3?cl=en) [french](http://google.com/patents/WO2010010265A2?cl=ja)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}